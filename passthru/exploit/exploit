#!/usr/bin/env bash
# exit on error
set -e
# ------------------------------------------------------------------------------
# FUNCTIONS
# ------------------------------------------------------------------------------
function print {
    (>&2 printf "\x1b[34m${1}\x1b[0m\n")
}
function exit_success {
    (>&2 printf "\x1b[32m- Script succeeded.\x1b[0m\n")
    exit 0
}
function exit_failure {
    (>&2 printf "\x1b[31m- Script failed.\x1b[0m\n")
    exit 1
}
function exit_non_applicable {
    (>&2 printf "\x1b[36m- Script non applicable.\x1b[0m\n")
    exit 2
}
function exit_manual {
    (>&2 printf "\x1b[33m- Script requires a manual operation.\x1b[0m\n")
    exit 3
}
function exit_not_implemented {
    (>&2 printf "\x1b[35m- Script not implemented.\x1b[0m\n")
    exit 4
}
function check_flag {
    print "- Checking flag..."
    expected_flag=$(cat ../.mkctf.yml | grep -E 'INSA{' | cut -d' ' -f2)
    if [ "${1}" = "${expected_flag}" ]; then
        exit_success
    fi
    exit_failure
}
# ------------------------------------------------------------------------------
# VARIABLES
# ------------------------------------------------------------------------------
DEBUG=0
CAPTURE=capture.pcap
SSLKEYLOG=sslkey.log
STATIC_URL=https://static.ctf.insecurity-insa.fr/13140c280d45224949bfe7fc1b978c6b97ddd55d.tar.gz
EMBEDDED_ZIP=passthru.zip
EXTRACTED_DATA=extracted.dat
# ------------------------------------------------------------------------------
# ARGUMENT PARSER
# ------------------------------------------------------------------------------
while [[ $# -gt 0 ]]
do
key="$1"
case ${key} in
    -d|--debug)
    DEBUG=1
    shift # past argument
    ;;
    *)    # unknown option
    print "unknown option: ${key}"
    shift # past argument
    ;;
esac
done
# ------------------------------------------------------------------------------
# MAIN SCRIPT
# ------------------------------------------------------------------------------
if [ ${DEBUG} -eq 0 ]; then
    print "- Downloading archive..."
    wget -O downloaded.tar.gz ${STATIC_URL}
    print "- Extracting embedded zip archive from tar archive..."
    tar xzvf downloaded.tar.gz ${EMBEDDED_ZIP}
else
    print "- Copying archive..."
    cp ../public-files/${EMBEDDED_ZIP} .
fi
print "- Uncompressing archive..."
unzip -o ${EMBEDDED_ZIP}
print "- Removing archive..."
rm -f ${EMBEDDED_ZIP}

print "- Extracting exfiltrated data from ${CAPTURE}..."
print "-- Parsing ${CAPTURE} using tshark..."
tshark -r capture.pcap -Y http -o ssl.keylog_file:"sslkey.log" -o ssl.debug_file:"/tmp/ssldebug.log" | grep -E -o 'kcahsni%3D[0-9a-f]+' | cut -d'D' -f2 > ${EXTRACTED_DATA}
print "-- Extracting flag from parsed packets..."
FLAG=$(cat ${EXTRACTED_DATA} | tr -d '\n' | python3 -c 'import sys,binascii;print(binascii.unhexlify(sys.stdin.read())[33:-32][::-1].decode())')
print "-- Found flag: ${FLAG}"

print "- Removing files..."
rm -rf ${CAPTURE} ${SSLKEYLOG} ${EXTRACTED_DATA} /tmp/ssldebug.log

check_flag ${FLAG}
