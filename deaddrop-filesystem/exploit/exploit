#!/usr/bin/env bash
# exit on error
set -e
# ------------------------------------------------------------------------------
# FUNCTIONS
# ------------------------------------------------------------------------------
function print {
    (>&2 printf "\x1b[34m${1}\x1b[0m\n")
}
function exit_success {
    (>&2 printf "\x1b[32m- Script succeeded.\x1b[0m\n")
    exit 0
}
function exit_failure {
    (>&2 printf "\x1b[31m- Script failed.\x1b[0m\n")
    exit 1
}
function exit_non_applicable {
    (>&2 printf "\x1b[36m- Script non applicable.\x1b[0m\n")
    exit 2
}
function exit_manual {
    (>&2 printf "\x1b[33m- Script requires a manual operation.\x1b[0m\n")
    exit 3
}
function exit_not_implemented {
    (>&2 printf "\x1b[35m- Script not implemented.\x1b[0m\n")
    exit 4
}
function check_flag {
    print "- Checking flag..."
    expected_flag=$(cat ../.mkctf.yml | grep -E 'INSA{' | cut -d' ' -f2)
    if [ "${1}" = "${expected_flag}" ]; then
        exit_success
    fi
    exit_failure
}
# ------------------------------------------------------------------------------
# VARIABLES
# ------------------------------------------------------------------------------
DEBUG=0
RANDSTR=$(head -c 8 /dev/urandom | xxd -ps)
MNT_DIR=/tmp/${RANDSTR}
IMG_FILE=dd.img
STATIC_URL=https://static.ctf.insecurity-insa.fr/4f44b0118806de17474dd221243d31cc9fbc9a7c.tar.gz
EMBEDDED_ZIP=deaddrop-filesystem.zip
# ------------------------------------------------------------------------------
# ARGUMENT PARSER
# ------------------------------------------------------------------------------
while [[ $# -gt 0 ]]
do
key="$1"
case ${key} in
    -d|--debug)
    DEBUG=1
    shift # past argument
    ;;
    *)    # unknown option
    print "unknown option: ${key}"
    shift # past argument
    ;;
esac
done
# ------------------------------------------------------------------------------
# MAIN SCRIPT
# ------------------------------------------------------------------------------
if [ ${DEBUG} -eq 0 ]; then
    print "- Downloading archive..."
    wget -O downloaded.tar.gz ${STATIC_URL}
    print "- Extracting embedded zip archive from tar archive..."
    tar xzvf downloaded.tar.gz ${EMBEDDED_ZIP}
else
    print "- Copying archive..."
    cp ../public-files/${EMBEDDED_ZIP} .
fi
print "- Uncompressing archive..."
unzip -o ${EMBEDDED_ZIP} ${IMG_FILE}
print "- Removing archive..."
rm -f ${EMBEDDED_ZIP}

print "- Mounting virtual hard disk"
print "-- Creating a loop device for ${IMG_FILE}"
LOOP=$(sudo losetup --show -P -f ${IMG_FILE})
print "-- Creating temporary directory ${MNT_DIR}"
mkdir ${MNT_DIR}
print "-- Mounting loop device (${LOOP}) on a temporary directory ${MNT_DIR}"
sudo mount ${LOOP} ${MNT_DIR}
print "-- Listing files in ${MNT_DIR}"
ls ${MNT_DIR}

print "- Exploiting..."
print "-- Retrieving username and password..."
USERNAME=$(cat ${MNT_DIR}/.memo.swp | grep -E '\w+:\w+' | cut -d':' -f1)
PASSWORD=$(cat ${MNT_DIR}/.memo.swp | grep -E '\w+:\w+' | cut -d':' -f2)
print "-- found ${USERNAME} and ${PASSWORD}"
print "-- Retrieving flag file..."
./ls -r ${MNT_DIR} ${USERNAME} ${PASSWORD}
FLAG_FILE_HASH=$(./ls -r ${MNT_DIR} ${USERNAME} ${PASSWORD} | grep -E 'flag.*DIRECTORY' | cut -d'|' -f1)
print "-- found flag file hash: ${FLAG_FILE_HASH}"
./cat ${MNT_DIR} ${USERNAME} ${PASSWORD} ${FLAG_FILE_HASH}/${FLAG_FILE_HASH}
FLAG=$(./cat ${MNT_DIR} ${USERNAME} ${PASSWORD} ${FLAG_FILE_HASH}/${FLAG_FILE_HASH} | grep -E 'INSA{')
print "-- found flag: ${FLAG}"

print "- Unmounting virtual hard disk"
print "-- Unmounting ${MNT_DIR}"
sudo umount ${MNT_DIR}
print "-- Removing temporary directory"
rmdir ${MNT_DIR}
print "-- Removing loop device ${LOOP}"
sudo losetup -d ${LOOP}

print "- Removing image file"
rm -f ${IMG_FILE}

check_flag ${FLAG}
