#!/usr/bin/env python3

import sys
from pathlib import Path
from argparse import ArgumentParser
from ddfs.index import Index
from ddfs.crypto import pbkdf

def parse_args():
    '''[summary]
    '''
    p = ArgumentParser(description="Cat DDFS files")
    p.add_argument('root', type=Path)
    p.add_argument('username')
    p.add_argument('password')
    p.add_argument('filepath', type=Path)
    return p.parse_args()

def perr(obj):
    '''[summary]
    '''
    ostr = str(obj)
    ostr += '\n'
    sys.stderr.buffer.write(ostr.encode())

def cat(root, key, filepath):
    '''[summary]
    '''
    if filepath.is_absolute():
        raise RuntimeError(f"filepath argument is expected to be relative.")

    if len(filepath.parts) > 1:
        index_path = root.joinpath(filepath.parent, Index.FILENAME)
    else:
        index_path = root.joinpath(Index.FILENAME)

    if not index_path.is_file():
        raise RuntimeError(f"Expected an index having path: {index_path}")

    index = Index(index_path)

    for record in index.records:

        if record.used:
            try:
                record.decrypt(key)
            except RuntimeError:
                perr('record cannot be decrypted, skipped.')
                continue
            else:
                perr(record)

        if record.hash == filepath.name:
            with root.joinpath(filepath).open('rb') as fp:
                data = fp.read()
            plaindata = record.decrypt_fbuf(key, data)
            sys.stdout.buffer.write(plaindata)

def main():
    '''[summary]
    '''
    args = parse_args()
    cat(args.root, pbkdf(args.username, args.password), args.filepath)

if __name__ == '__main__':
    main()

