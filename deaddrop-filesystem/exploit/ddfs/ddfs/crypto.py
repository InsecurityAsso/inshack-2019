from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC

BACKEND = default_backend()

def xor(data, key):
    '''[summary]
    '''
    buf = bytearray(data)
    buflen = len(data)
    keylen = len(key)
    for i in range(buflen):
        buf[i] ^= key[i%keylen]
    return bytes(buf)

def pbkdf(username, password):
    '''
    /! WARNING !\
    ullshit cryptography detected
    /! WARNING !\
    '''
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA1(),
        length=16,
        salt=username.encode(),
        iterations=1000,
        backend=BACKEND
    )
    return kdf.derive(password.encode())

def encrypt_buf(iv, key, data):
    '''[summary]
    '''
    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=BACKEND)
    encryptor = cipher.encryptor()
    return encryptor.update(data) + encryptor.finalize()

def decrypt_buf(iv, key, data):
    '''[summary]
    '''
    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=BACKEND)
    decryptor = cipher.decryptor()
    return decryptor.update(data) + decryptor.finalize()
