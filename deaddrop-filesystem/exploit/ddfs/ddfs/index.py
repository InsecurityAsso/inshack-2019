
from struct import unpack, calcsize
from ddfs.record import Record

'''
x   pad byte    no value
c   char    bytes of length 1   1
b   signed char     integer     1   (1),(3)
B   unsigned char   integer     1   (3)
?   _Bool   bool    1   (1)
h   short   integer     2   (3)
H   unsigned short  integer     2   (3)
i   int     integer     4   (3)
I   unsigned int    integer     4   (3)
l   long    integer     4   (3)
L   unsigned long   integer     4   (3)
q   long long   integer     8   (2), (3)
Q   unsigned long long  integer     8   (2), (3)
n   ssize_t     integer         (4)
N   size_t  integer         (4)
e   (7)     float   2   (5)
f   float   float   4   (5)
d   double  float   8   (5)
s   char[]  bytes
p   char[]  bytes
P   void *  integer         (6)
'''

class Index:
    '''[summary]
    '''
    MAGIC = b'DDFS.IDX'
    MAGIC_SZ = 8
    MAJOR = 1
    MINOR = 0
    PATCH = 0
    VERSION_SZ = 3*4
    FILENAME = 'ddfs.idx'
    MAX_RECORD = 4095

    def __init__(self, path):
        '''[summary]
        '''
        with path.open('rb') as fp:
            data = fp.read()
        # unpacking format
        fmt = f'{self.MAGIC_SZ}s3i{Record.SZ-self.MAGIC_SZ-self.VERSION_SZ}s'
        # pre-unpacking sanity checks
        if calcsize(fmt) != Record.SZ:
            raise RuntimeError(f"unpack format size differs from expected header size ({Record.SZ}).")
        # initialize members
        header = unpack(fmt, data[:Record.SZ])
        self._magic = header[0]
        self._major = header[1]
        self._minor = header[2]
        self._patch = header[3]
        self._records = self.__unpack_records(data[Record.SZ:])
        # post-unpacking sanity checks
        if self._magic != self.MAGIC:
            raise RuntimeError("Failed to retrieve magic.")

    @property
    def version(self):
        '''[summary]
        '''
        return self._major, self._minor, self._patch

    @property
    def records(self):
        '''[summary]
        '''
        return self._records

    def __unpack_records(self, data):
        '''[summary]
        '''
        records = []
        while data:
            records.append(Record(data[:Record.SZ]))
            data = data[Record.SZ:]
        return records
