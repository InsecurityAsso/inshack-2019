#!/usr/bin/env bash
# exit on error
set -e
# ------------------------------------------------------------------------------
# FUNCTIONS
# ------------------------------------------------------------------------------
function print {
    (>&2 printf "\x1b[34m${1}\x1b[0m\n")
}
function exit_success {
    (>&2 printf "\x1b[32m- Script succeeded.\x1b[0m\n")
    exit 0
}
function exit_failure {
    (>&2 printf "\x1b[31m- Script failed.\x1b[0m\n")
    exit 1
}
function exit_non_applicable {
    (>&2 printf "\x1b[36m- Script non applicable.\x1b[0m\n")
    exit 2
}
function exit_manual {
    (>&2 printf "\x1b[33m- Script requires a manual operation.\x1b[0m\n")
    exit 3
}
function exit_not_implemented {
    (>&2 printf "\x1b[35m- Script not implemented.\x1b[0m\n")
    exit 4
}
function check_flag {
    print "- Checking flag..."
    expected_flag=$(cat ../.mkctf.yml | grep -E 'INSA{' | cut -d' ' -f2)
    if [ "${1}" = "${expected_flag}" ]; then
        exit_success
    fi
    exit_failure
}
# ------------------------------------------------------------------------------
# VARIABLES
# ------------------------------------------------------------------------------
KNOCK=0
DEBUG=0
DD_IMG=dd.img
STATIC_URL=https://static.ctf.insecurity-insa.fr/3b89ef8bb51773c8f3478bf356271ac762ec96c3.tar.gz
EMBEDDED_ZIP=you-shall-not-pass.zip
# ------------------------------------------------------------------------------
# ARGUMENT PARSER
# ------------------------------------------------------------------------------
while [[ $# -gt 0 ]]
do
key="$1"
case ${key} in
    -k|--knock)
    KNOCK=1
    shift
    ;;
    -d|--debug)
    DEBUG=1
    shift # past argument
    ;;
    *)    # unknown option
    print "unknown option: ${key}"
    shift # past argument
    ;;
esac
done
# ------------------------------------------------------------------------------
# MAIN SCRIPT
# ------------------------------------------------------------------------------
if [ ${DEBUG} -eq 0 ]; then
    HOST=you-shall-not-pass.ctf.insecurity-insa.fr
    print "- Downloading archive..."
    wget -O downloaded.tar.gz ${STATIC_URL}
    print "- Extracting embedded zip archive from tar archive..."
    tar xzvf downloaded.tar.gz ${EMBEDDED_ZIP}
else
    HOST=localhost
    print "- Copying disk image..."
    cp ../public-files/${EMBEDDED_ZIP} .
fi
print "- Uncompressing archive..."
unzip -o ${EMBEDDED_ZIP} ${DD_IMG}
print "- Removing archive..."
rm -f ${EMBEDDED_ZIP}
print "- Extracting sesame configuration from dd image..."
python3 extract_sesame.py ${DD_IMG} > sesame.json
if [ ${KNOCK} -eq 1 ]; then
    print "- Opening backdoor using recovered configuration..."
    FLAG=$(python3 open_sesame.py ${HOST} sesame.json)
    check_flag ${FLAG}
else
    # a monitoring issue forced us to disable last check
    exit_manual
fi
