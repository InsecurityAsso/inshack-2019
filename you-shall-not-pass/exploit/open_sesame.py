import sys
import time
import json
import socket
import argparse
from scapy.all import *

def perr(msg):
    sys.stderr.write("{}\n".format(msg))
    sys.stderr.flush()

def pout(msg):
    sys.stdout.write("{}\n".format(msg))
    sys.stdout.flush()

def knock_UDP(dst_ip, dst_port):
    perr("knocking using UDP at {}:{} (2 pkts)".format(dst_ip, dst_port))
    for i in range(2):
        send(IP(dst=dst_ip)/UDP(dport=dst_port), verbose=False)


def knock_TCP(dst_ip, dst_port):
    perr("knocking using TCP at {}:{} (2 pkts)".format(dst_ip, dst_port))
    for i in range(2):
        send(IP(dst=dst_ip)/TCP(dport=dst_port), verbose=False)

def ask_for_flag(open_sesame, dst_ip, dst_port):
    perr("asking for the flag at {}:{}".format(dst_ip, dst_port))
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.connect((dst_ip, dst_port))
    except Exception as e:
        perr("Connection failed...")
        pout("Failed")
    else:
        perr("Connection succeeded.")
        sock.send(open_sesame.encode())
        try:
            data = sock.recv(1024).decode()
            perr("received: {}".format(data))
            pout(data)
        except:
            perr("Door failed to open")
    finally:
        sock.close()

def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('host', help="Host to be contacted.")
    parser.add_argument('config', help="Path to Sesame configuration file.")
    return parser.parse_args()

KNOCK_FUNCS = {
    'TCP': knock_TCP,
    'UDP': knock_UDP
}

def app():
    args = parse_args()
    args.dst_ip = socket.gethostbyname(args.host)
    with open(args.config, 'r') as fp:
        conf = json.load(fp)
    for check in conf['sequence']:
        KNOCK_FUNCS[check['proto']](args.dst_ip, check['port'])
        time.sleep(0.5)
    time.sleep(0.5)
    ask_for_flag(conf['open_sesame'], args.dst_ip, conf['door'])

if __name__ == '__main__':
    perr(r'''
  ___                   ____
 / _ \ _ __   ___ _ __ / ___|  ___  ___  __ _ _ __ ___   ___
| | | | '_ \ / _ \ '_ \\___ \ / _ \/ __|/ _` | '_ ` _ \ / _ \
| |_| | |_) |  __/ | | |___) |  __/\__ \ (_| | | | | | |  __/
 \___/| .__/ \___|_| |_|____/ \___||___/\__,_|_| |_| |_|\___|
      |_|

    ooo,    .---.
   o`  o   /    |\________________
  o`   'oooo()  | ________   _   _)
  `oo   o` \    |/        | | | |
    `ooo'   `---'         "-" |_|
''')
    app()







