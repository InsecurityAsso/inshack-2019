#!/usr/bin/env bash
# file automatically generated by mkctf.

set -e

function print {
    (>&2 printf "\x1b[34m${1}\x1b[0m\n")
}
function exit_success {
    (>&2 printf "\x1b[32m- Script succeeded.\x1b[0m\n")
    exit 0
}
function exit_failure {
    (>&2 printf "\x1b[31m- Script failed.\x1b[0m\n")
    exit 1
}
function exit_non_applicable {
    (>&2 printf "\x1b[36m- Script non applicable.\x1b[0m\n")
    exit 2
}
function exit_manual {
    (>&2 printf "\x1b[33m- Script requires a manual operation.\x1b[0m\n")
    exit 3
}
function exit_not_implemented {
    (>&2 printf "\x1b[35m- Script not implemented.\x1b[0m\n")
    exit 4
}
# ------------------------------------------------------------------------------
# VARIABLES
# ------------------------------------------------------------------------------
DEBUG=0
RUN=0
KILL=0
BUILD=0
REMOTE=0
CONTAINER_NAME=you-shall-not-pass
# ------------------------------------------------------------------------------
# ARGUMENT PARSER
# ------------------------------------------------------------------------------
while [[ $# -gt 0 ]]
do
key="$1"
case ${key} in
    -d|--debug)
    DEBUG=1
    shift # past argument
    ;;
    -b|--build)
    BUILD=1
    shift # past argument
    ;;
    --remote)
    REMOTE=1
    shift
    ;;
    -r|--run)
    RUN=1
    shift # past argument
    ;;
    -k|--kill)
    KILL=1
    shift # past argument
    ;;
    *)    # unknown option
    print "unknown option: ${key}"
    shift # past argument
    ;;
esac
done
# ------------------------------------------------------------------------------
# MAIN SCRIPT
# ------------------------------------------------------------------------------
if [ ${BUILD} -eq 1 ]; then
    print "- Generating docker file..."
    flag=$(grep -E 'flag:' .mkctf.yml | cut -d' ' -f2)
    cp -f Dockerfile.dist Dockerfile
    sed -i "s/{{SESAME_FLAG}}/${flag}/g" Dockerfile
    if [ ${DEBUG} -eq 1 ]; then
        print "- Building docker image..."
        sudo docker build -t koromodako/${CONTAINER_NAME} .
    else
        print "- Building docker image..."
        sudo docker build -t registry-chal.infra.insecurity-insa.fr/insecurity/${CONTAINER_NAME} .
        print "- Login in registry-chal..."
        sudo docker login registry-chal.infra.insecurity-insa.fr
        print "- Pushing image to registry-chal..."
        sudo docker push registry-chal.infra.insecurity-insa.fr/insecurity/${CONTAINER_NAME}
    fi
fi
if [ ${REMOTE} -eq 1 ]; then
    scp server-files/* me@remote.com:/home/me
fi
if [ ${RUN} -eq 1 ]; then
    print "- Spawning docker container..."
    sudo docker run -d \
        --name ${CONTAINER_NAME} \
        --cap-add=NET_ADMIN \
        -p 10000:10000/tcp \
        -p 10010:10010/tcp \
        -p 10020:10020/tcp \
        -p 10040:10040/tcp \
        -p 10060:10060/tcp \
        -p 10080:10080/tcp \
        -p 10090:10090/tcp \
        -p 20000:20000/tcp \
        -p 10000:10000/udp \
        -p 10010:10010/udp \
        -p 10020:10020/udp \
        -p 10040:10040/udp \
        -p 10060:10060/udp \
        -p 10080:10080/udp \
        -p 10090:10090/udp \
        koromodako/${CONTAINER_NAME}
fi
if [ ${KILL} -eq 1 ]; then
    print "- Stopping docker container..."
    sudo docker stop ${CONTAINER_NAME}
    sudo docker rm ${CONTAINER_NAME}
fi
print "- Done."
exit_success
