#!/usr/bin/env bash
# exit on error
set -e
# ------------------------------------------------------------------------------
# FUNCTIONS
# ------------------------------------------------------------------------------
function print {
    (>&2 printf "\x1b[34m${1}\x1b[0m\n")
}
function exit_success {
    (>&2 printf "\x1b[32m- Script succeeded.\x1b[0m\n")
    exit 0
}
function exit_failure {
    (>&2 printf "\x1b[31m- Script failed.\x1b[0m\n")
    exit 1
}
function exit_non_applicable {
    (>&2 printf "\x1b[36m- Script non applicable.\x1b[0m\n")
    exit 2
}
function exit_manual {
    (>&2 printf "\x1b[33m- Script requires a manual operation.\x1b[0m\n")
    exit 3
}
function exit_not_implemented {
    (>&2 printf "\x1b[35m- Script not implemented.\x1b[0m\n")
    exit 4
}
function usage {
    print "usage: build [-h|--help]"
    print "OPTIONS:"
    print "    --help,-h: display usage message"
    exit_failure
}
# ------------------------------------------------------------------------------
# MAIN SCRIPT
# ------------------------------------------------------------------------------
print "========================================================================="
print "build"
print "========================================================================="

while test $# -gt 0
do
    case "$1" in
        --help|-h) usage
            ;;
        -*) print "- Unknown short option $1"
            ;;
        --*) print "- Unknown long option $1"
            ;;
        *) print "- Unknown argument $1"
            ;;
    esac
    shift
done

SRC=src
TMP=tmp
BUILD=tmp-build
MKCTF_FILE=.mkctf.yml

GIFS=${SRC}/gifs
VENV=${SRC}/venv
LOL=${SRC}/lol.py
PIP=${VENV}/bin/pip
ARCH=public-files/obscure-file-format.zip
PYTHON=${VENV}/bin/python3
OBFUSCATED=${BUILD}/l
OBFUSCATOR="${VENV}/bin/pyobfuscator --type-store-in=src/lol.ts --trust-store-in"
PYOBFUSCATOR=${SRC}/pyobfuscator
REQUIREMENTS=${SRC}/requirements.txt

print "- Setting up venv..."
python3 -m venv ${VENV}
print "- Installing requirements..."
${PIP} install -U -r ${REQUIREMENTS}
${PIP} install -U -e ${PYOBFUSCATOR}/

print "- Creating ${TMP} & ${BUILD}..."
mkdir ${TMP} ${BUILD}

print "- Obfuscating ${LOL} into ${OBFUSCATED}..."
${OBFUSCATOR} ${LOL} ${OBFUSCATED}

print "- Generating content..."
print "-- Copying existing files from ${GIFS} to ${TMP}..."
cp ${GIFS}/* ${TMP}/
print "-- Creating some random directories and files in ${TMP}..."
for i in {1..4}
do
    d=$(head -c 10 /dev/urandom | xxd -ps)
    print "--- Creating directory ${TMP}/${d}"
    mkdir ${TMP}/${d}
    for j in {1..3}
    do
        f=$(head -c 10 /dev/urandom | xxd -ps)
        print "--- Creating file ${TMP}/${d}/${f}"
        curl -fsSL "https://baconipsum.com/api/?type=all-meat&format=text" > ${TMP}/${d}/${f}
    done
done
print "-- Creating flag file"
FLAG=$(cat ${MKCTF_FILE} | grep -E 'INSA{' | cut -d' ' -f2)
echo "${FLAG}" > ${TMP}/$(head -c 10 /dev/urandom | xxd -ps)

print "- Generating archive using obfuscated script..."
${PYTHON} ${OBFUSCATED} ${TMP} ${BUILD}
mv ${BUILD}/archive ${BUILD}/a
mv ${BUILD}/keystore ${BUILD}/k
zip -j ${ARCH} ${BUILD}/a ${BUILD}/k ${OBFUSCATED}

print "- Removing ${TMP} & ${BUILD}..."
rm -rf ${TMP} ${BUILD}

exit_success
